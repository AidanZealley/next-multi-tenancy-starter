generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  organisationId       String?
  selectedOrganisation Organisation?  @relation("SelectedOrganisation", fields: [organisationId], references: [id])
  accounts             Account[]
  invitesSent          Invite[]
  memberships          Membership[]
  messages             Message[]
  ownedOrganisations   Organisation[] @relation("OwnerOfOrganisation")
  reactions            Reaction[]
  sessions             Session[]
}

model Organisation {
  id          String       @id @default(cuid())
  name        String
  userId      String
  isActive    Boolean?     @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation("OwnerOfOrganisation", fields: [userId], references: [id], onDelete: Cascade)
  invites     Invite[]
  memberships Membership[]
  messages    Message[]
  reactions   Reaction[]
  selectedBy  User[]       @relation("SelectedOrganisation")
}

model Membership {
  userId         String
  role           Role         @default(USER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  id             String       @id @default(cuid())
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organisationId])
}

model Invite {
  id             String       @id @default(cuid())
  email          String
  organisationId String
  userId         String
  status         InviteStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  invitedBy      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id             String       @id @default(cuid())
  text           String
  userId         String
  organisationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions      Reaction[]
}

model Reaction {
  id             String       @id @default(cuid())
  emoji          String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  organisationId String
  messageId      String
  message        Message      @relation(fields: [messageId], references: [id])
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
